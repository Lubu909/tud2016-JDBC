package manager;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

import model.Character;

public class CharacterManager implements ICharacterManager{
	private Connection conn;
	private Statement stmt;
	
	private PreparedStatement addCharacterStmt;
	private PreparedStatement delCharacterStmt;
	private PreparedStatement delAllCharacterStmt;
	private PreparedStatement listCharacterStmt;
	
	public CharacterManager(){
		try {
			conn = DriverManager.getConnection("jdbc:hsqldb:hsql://localhost/projekt");
			stmt = conn.createStatement();
			ResultSet rs = conn.getMetaData().getTables(null, null, null, null);
			boolean tableExists = false;
			while (rs.next()) {
				if ("Character".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}
			if (!tableExists) stmt.executeUpdate("CREATE TABLE Character(idCharacter int UNIQUE GENERATED BY DEFAULT AS IDENTITY, nick varchar(30) UNIQUE, characterClass varchar(20), characterRace varchar(20), level int)");
			addCharacterStmt = conn.prepareStatement("INSERT INTO Character(nick, characterClass, characterRace, level) VALUES (?,?,?,?)");
			delCharacterStmt = conn.prepareStatement("DELETE FROM Character WHERE idCharacter = ?");
			delAllCharacterStmt = conn.prepareStatement("DELETE FROM Character");
			listCharacterStmt = conn.prepareStatement("SELECT * FROM Character");
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	@Override
	public Connection getConnection() {
		return conn;
	}
	
	@Override
	public int addCharacter(Character character){
		int ilosc = 0;
		try {
			conn.setAutoCommit(false);
			addCharacterStmt.setString(1, character.getNick());
			addCharacterStmt.setString(2, character.getCharacterClass());
			addCharacterStmt.setString(3, character.getCharacterRace());
			addCharacterStmt.setInt(4, character.getLevel());
			ilosc = addCharacterStmt.executeUpdate();
			conn.commit();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return ilosc;
	}
	
	@Override
	public int deleteCharacter(Character character){
		int ilosc = 0;
		try{
			conn.setAutoCommit(false);
			delCharacterStmt.setInt(1, character.getIdCharacter());
			ilosc = delCharacterStmt.executeUpdate();
			conn.commit();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return ilosc;
	}
	
	@Override
	public int clearCharacter(){
		int ilosc = 0;
		try{
			ilosc = delAllCharacterStmt.executeUpdate();
		} catch(SQLException e){
			e.printStackTrace();
		}
		return ilosc;
	}
	
	@Override
	public List<Character> getAll(){
		List<Character> chars = new ArrayList<Character>();
		try{
			ResultSet rs = listCharacterStmt.executeQuery();
			while(rs.next()){
				Character chara = new Character();
				chara.setIdCharacter(rs.getInt("idCharacter"));
				chara.setNick(rs.getString("nick"));
				chara.setCharacterClass(rs.getString("characterClass"));
				chara.setCharacterRace(rs.getString("characterRace"));
				chara.setLevel(rs.getInt("level"));
				chars.add(chara);
			}
		} catch(SQLException e){
			e.printStackTrace();
		}
		return chars;
	}
	
}
