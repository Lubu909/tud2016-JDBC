package manager;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import model.Account;
import model.Character;

public class CharacterListManager implements ICharacterListManager{
	private Connection conn;
	private Statement stmt;
	
	private PreparedStatement addCharStmt;
	private PreparedStatement delCharStmt;
	private PreparedStatement purgeStmt;
	private PreparedStatement listStmt;
	
	public CharacterListManager(){
		try {
			conn = DriverManager.getConnection("jdbc:hsqldb:hsql://localhost/projekt");
			stmt = conn.createStatement();
			ResultSet rs = conn.getMetaData().getTables(null, null, null, null);
			boolean tableExists = false;
			while (rs.next()) {
				if ("CharacterList".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}
			if (!tableExists) stmt.executeUpdate("CREATE TABLE CharacterList(idCharacterList int UNIQUE GENERATED BY DEFAULT AS IDENTITY, idAccount int, idCharacter int, foreign key (idAccount) references account(idAccount), foreign key (idCharacter) references character(idCharacter))");
			addCharStmt = conn.prepareStatement("INSERT INTO CharacterList(idAccount,idCharacter) VALUES(?,?)");
			delCharStmt = conn.prepareStatement("DELETE FROM CharacterList WHERE idAccount = ? AND idCharacter = ?");
			purgeStmt = conn.prepareStatement("DELETE FROM CharacterList WHERE idAccount = ?");
			listStmt = conn.prepareStatement("SELECT a.login, c.nick, c.characterclass, c.characterrace, c.level FROM characterList as cl LEFT JOIN account as a ON cl.idAccount=a.idAccount LEFT JOIN character as c ON c.idCharacter=cl.idCharacter WHERE idAccount=?");
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	@Override
	public Connection getConnection() {
		return conn;
	}

	@Override
	public int addCharacterToAcc(Account account, Character character) {
		int ilosc = 0;
		try {
			conn.setAutoCommit(false);
			addCharStmt.setInt(1, account.getId());
			addCharStmt.setInt(2, character.getIdCharacter());
			ilosc = addCharStmt.executeUpdate();
			conn.commit();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return ilosc;
	}

	@Override
	public int delCharacterFromAcc(Account account, Character character) {
		int ilosc = 0;
		try {
			conn.setAutoCommit(false);
			delCharStmt.setInt(1, account.getId());
			delCharStmt.setInt(2, character.getIdCharacter());
			ilosc = delCharStmt.executeUpdate();
			conn.commit();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return ilosc;
	}

	@Override
	public int purgeAcc(Account account) {
		int ilosc = 0;
		try {
			conn.setAutoCommit(false);
			purgeStmt.setInt(1, account.getId());
			ilosc = purgeStmt.executeUpdate();
			conn.commit();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return ilosc;
	}

	@Override
	public List<Character> listCharacters(Account account) {
		List<Character> chars = new ArrayList<Character>();
		try{
			listStmt.setInt(1, account.getId());
			ResultSet rs = listStmt.executeQuery();
			while(rs.next()){
				Character chara = new Character();
				chara.setIdCharacter(rs.getInt("idCharacter"));
				chara.setNick(rs.getString("nick"));
				chara.setCharacterClass(rs.getString("characterClass"));
				chara.setCharacterRace(rs.getString("characterRace"));
				chara.setLevel(rs.getInt("level"));
				chars.add(chara);
			}
		} catch(SQLException e){
			e.printStackTrace();
		}
		return chars;
	}
}
